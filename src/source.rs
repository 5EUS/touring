// Generated by `wit-bindgen` 0.45.0. DO NOT EDIT!
// Options used:
#[derive(Clone)]
pub struct Manga {
  pub id: _rt::String,
  pub title: _rt::String,
  pub description: Option<_rt::String>,
  pub cover_url: Option<_rt::String>,
}
impl ::core::fmt::Debug for Manga {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("Manga").field("id", &self.id).field("title", &self.title).field("description", &self.description).field("cover-url", &self.cover_url).finish()
  }
}
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_fetch_manga_list_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result1 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  T::fetch_manga_list(_rt::string_lift(bytes0))
};
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
let vec8 = result1;
let len8 = vec8.len();
let layout8 = _rt::alloc::Layout::from_size_align(vec8.len() * (10*::core::mem::size_of::<*const u8>()), ::core::mem::size_of::<*const u8>()).unwrap();
let (result8, _cleanup8) = wit_bindgen::rt::Cleanup::new(layout8);if let Some(cleanup) = _cleanup8 { cleanup.forget(); }
for (i, e) in vec8.into_iter().enumerate() {
  let base = result8.add(i * (10*::core::mem::size_of::<*const u8>()));
  {
    let Manga{ id:id3, title:title3, description:description3, cover_url:cover_url3, } = e;
    let vec4 = (id3.into_bytes()).into_boxed_slice();
    let ptr4 = vec4.as_ptr().cast::<u8>();
    let len4 = vec4.len();
    ::core::mem::forget(vec4);
    *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
    let vec5 = (title3.into_bytes()).into_boxed_slice();
    let ptr5 = vec5.as_ptr().cast::<u8>();
    let len5 = vec5.len();
    ::core::mem::forget(vec5);
    *base.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
    *base.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
    match description3 {
      Some(e) => {
        *base.add(4*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec6 = (e.into_bytes()).into_boxed_slice();
        let ptr6 = vec6.as_ptr().cast::<u8>();
        let len6 = vec6.len();
        ::core::mem::forget(vec6);
        *base.add(6*::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
        *base.add(5*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr6.cast_mut();
      },
      None => {
        {
          *base.add(4*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        }
      },
    };match cover_url3 {
      Some(e) => {
        *base.add(7*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec7 = (e.into_bytes()).into_boxed_slice();
        let ptr7 = vec7.as_ptr().cast::<u8>();
        let len7 = vec7.len();
        ::core::mem::forget(vec7);
        *base.add(9*::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
        *base.add(8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr7.cast_mut();
      },
      None => {
        {
          *base.add(7*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        }
      },
    };}
  }
  *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
  *ptr2.add(0).cast::<*mut u8>() = result8;
  ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_fetch_manga_list<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = *arg0.add(0).cast::<*mut u8>();
  let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
  let base12 = l0;
  let len12 = l1;
  for i in 0..len12 {
    let base = base12.add(i * (10*::core::mem::size_of::<*const u8>()));
    {
      let l2 = *base.add(0).cast::<*mut u8>();
      let l3 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l2, l3, 1);
      let l4 = *base.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l5 = *base.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l4, l5, 1);
      let l6 = i32::from(*base.add(4*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l6 {
        0 => (),
        _ => {
          let l7 = *base.add(5*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l8 = *base.add(6*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l7, l8, 1);
        },
      }
      let l9 = i32::from(*base.add(7*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l9 {
        0 => (),
        _ => {
          let l10 = *base.add(8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l11 = *base.add(9*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l10, l11, 1);
        },
      }
    }
  }
  _rt::cabi_dealloc(base12, len12 * (10*::core::mem::size_of::<*const u8>()), ::core::mem::size_of::<*const u8>());
} }
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_fetch_chapter_images_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result1 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  T::fetch_chapter_images(_rt::string_lift(bytes0))
};
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
let vec4 = result1;
let len4 = vec4.len();
let layout4 = _rt::alloc::Layout::from_size_align(vec4.len() * (2*::core::mem::size_of::<*const u8>()), ::core::mem::size_of::<*const u8>()).unwrap();
let (result4, _cleanup4) = wit_bindgen::rt::Cleanup::new(layout4);if let Some(cleanup) = _cleanup4 { cleanup.forget(); }
for (i, e) in vec4.into_iter().enumerate() {
  let base = result4.add(i * (2*::core::mem::size_of::<*const u8>()));
  {
    let vec3 = (e.into_bytes()).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
  }
}
*ptr2.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
*ptr2.add(0).cast::<*mut u8>() = result4;
ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_fetch_chapter_images<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = *arg0.add(0).cast::<*mut u8>();
  let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
  let base4 = l0;
  let len4 = l1;
  for i in 0..len4 {
    let base = base4.add(i * (2*::core::mem::size_of::<*const u8>()));
    {
      let l2 = *base.add(0).cast::<*mut u8>();
      let l3 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l2, l3, 1);
    }
  }
  _rt::cabi_dealloc(base4, len4 * (2*::core::mem::size_of::<*const u8>()), ::core::mem::size_of::<*const u8>());
} }
pub trait Guest {
  /// Fetch a list of manga by query
  #[allow(async_fn_in_trait)]
  fn fetch_manga_list(query: _rt::String,) -> _rt::Vec::<Manga>;
  /// Fetch all image URLs for a given chapter
  #[allow(async_fn_in_trait)]
  fn fetch_chapter_images(chapter_id: _rt::String,) -> _rt::Vec::<_rt::String>;
}
#[doc(hidden)]

macro_rules! __export_world_source_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "fetch-manga-list")]
    unsafe extern "C" fn export_fetch_manga_list(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_fetch_manga_list_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_fetch-manga-list")]
    unsafe extern "C" fn _post_return_fetch_manga_list(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_fetch_manga_list::<$ty>(arg0) }
    }
    #[unsafe(export_name = "fetch-chapter-images")]
    unsafe extern "C" fn export_fetch_chapter_images(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_fetch_chapter_images_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_fetch-chapter-images")]
    unsafe extern "C" fn _post_return_fetch_chapter_images(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_fetch_chapter_images::<$ty>(arg0) }
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_source_cabi;

#[cfg_attr(target_pointer_width="64", repr(align(8)))]
#[cfg_attr(target_pointer_width="32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 2*::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 2*::core::mem::size_of::<*const u8>()]);
mod _rt {
  #![allow(dead_code, clippy::all)]
  pub use alloc_crate::string::String;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      unsafe { String::from_utf8_unchecked(bytes) }
    }
  }
  pub use alloc_crate::alloc;
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    unsafe {
      let layout = alloc::Layout::from_size_align_unchecked(size, align);
      alloc::dealloc(ptr, layout);
    }
  }
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_source_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_source_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_source_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.45.0:touring:source:source:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 290] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa5\x01\x01A\x02\x01\
A\x09\x01ks\x01r\x04\x02ids\x05titles\x0bdescription\0\x09cover-url\0\x03\0\x05m\
anga\x03\0\x01\x01p\x02\x01@\x01\x05querys\0\x03\x04\0\x10fetch-manga-list\x01\x04\
\x01ps\x01@\x01\x0achapter-ids\0\x05\x04\0\x14fetch-chapter-images\x01\x06\x04\0\
\x15touring:source/source\x04\0\x0b\x0c\x01\0\x06source\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.238.0\x10wit-bindgen-rust\x060.45.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

